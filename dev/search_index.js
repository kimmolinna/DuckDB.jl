var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = DuckDB","category":"page"},{"location":"#DuckDB","page":"Home","title":"DuckDB","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for DuckDB.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [DuckDB]","category":"page"},{"location":"#DuckDB.DB","page":"Home","title":"DuckDB.DB","text":"`DuckDB.DB()` => in-memory SQLite database\n`DuckDB.DB(file)` => file-based SQLite database\n\nConstructors for a representation of a DuckDB database, either backed by an on-disk file or in-memory.\n\nDuckDB.DB requires the file string argument in the 2nd definition as the name of either a pre-defined DuckDB database to be opened, or if the file doesn't exist, a database will be created.\n\nThe DuckDB.DB object represents a single connection to a DuckDB database. All other DuckDB.jl functions take an DuckDB.DB as the first argument as context.\n\nTo create an in-memory temporary database, call DuckDB.DB().\n\nThe DuckDB.DB will be automatically closed/shutdown when it goes out of scope (i.e. the end of the Julia session, end of a function call wherein it was created, etc.)\n\nNOTE: This borrows heavily from SQLite.jl, here\n\n\n\n\n\n","category":"type"},{"location":"#DuckDB.duckdb_date","page":"Home","title":"DuckDB.duckdb_date","text":"Days are stored as days since 1970-01-01\n\nUse the duckdbfromdate/duckdbtodate function to extract individual information\n\n\n\n\n\n","category":"type"},{"location":"#DuckDB.duckdb_hugeint","page":"Home","title":"DuckDB.duckdb_hugeint","text":"Hugeints are composed in a (lower, upper) component\n\nThe value of the hugeint is upper * 2^64 + lower\n\nFor easy usage, the functions duckdbhugeinttodouble/duckdbdoubletohugeint are recommended\n\n\n\n\n\n","category":"type"},{"location":"#DuckDB.duckdb_time","page":"Home","title":"DuckDB.duckdb_time","text":"Time is stored as microseconds since 00:00:00\n\nUse the duckdbfromtime/duckdbtotime function to extract individual information\n\n\n\n\n\n","category":"type"},{"location":"#DuckDB.duckdb_timestamp","page":"Home","title":"DuckDB.duckdb_timestamp","text":"Timestamps are stored as microseconds since 1970-01-01\n\nUse the duckdbfromtimestamp/duckdbtotimestamp function to extract individual information\n\n\n\n\n\n","category":"type"},{"location":"#DBInterface.execute-Tuple{DuckDB.DB, String}","page":"Home","title":"DBInterface.execute","text":"DBInterface.execute(db::DB, sql::String, [params])\n\nTODO: Support DBInterface statements\n\nTake inputs given by db and sql execute the query and return an iterator of result rows.\n\nNote that the returned result row iterator only supports a single-pass, forward-only iteration of the result rows.\n\nTODO: Support Tables.jl\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.close-Tuple{Any}","page":"Home","title":"DuckDB.close","text":"close(database)\n\nCloses the specified database and de-allocates all memory allocated for that database.\n\nThis should be called after you are done with any database allocated through duckdb_open.\n\nNote that failing to call duckdb_close (in case of e.g. a program crash) will not cause data corruption. Still it is recommended to always correctly close a database object after you are done with it. *database: the database object to shut down.\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.connect-Tuple{String}","page":"Home","title":"DuckDB.connect","text":"connect(path)\n\nCreates a new database or opens an existing database file stored at the the given path. If no path is given a new in-memory database is created instead.\n\npath: Path to the database file on disk or :memory: to open an in-memory database.\nreturns: a connection handle\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.disconnect-Tuple{Any}","page":"Home","title":"DuckDB.disconnect","text":"disconnect(connection)\n\nCloses the specified connection and de-allocates all memory allocated for that connection.\n\nconnection: The connection to close.\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_append_blob-Tuple{Any, Any, Any}","page":"Home","title":"DuckDB.duckdb_append_blob","text":"Append a blob value to the appender.\n\nDUCKDBAPI duckdbstate duckdbappendblob(duckdbappender appender, const void *data, idxt length);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_append_bool-Tuple{Any, Any}","page":"Home","title":"DuckDB.duckdb_append_bool","text":"Append a bool value to the appender.\n\nDUCKDBAPI duckdbstate duckdbappendbool(duckdb_appender appender, bool value);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_append_date-Tuple{Any, Any}","page":"Home","title":"DuckDB.duckdb_append_date","text":"Append a duckdb_date value to the appender.\n\nDUCKDBAPI duckdbstate duckdbappenddate(duckdbappender appender, duckdbdate value);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_append_double-Tuple{Any, Any}","page":"Home","title":"DuckDB.duckdb_append_double","text":"Append a double value to the appender.\n\nDUCKDBAPI duckdbstate duckdbappenddouble(duckdb_appender appender, double value);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_append_float-Tuple{Any, Any}","page":"Home","title":"DuckDB.duckdb_append_float","text":"Append a float value to the appender.\n\nDUCKDBAPI duckdbstate duckdbappendfloat(duckdb_appender appender, float value);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_append_hugeint-Tuple{Any, Any}","page":"Home","title":"DuckDB.duckdb_append_hugeint","text":"Append a duckdb_hugeint value to the appender.\n\nDUCKDBAPI duckdbstate duckdbappendhugeint(duckdbappender appender, duckdbhugeint value);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_append_int16-Tuple{Any, Any}","page":"Home","title":"DuckDB.duckdb_append_int16","text":"Append an int16_t value to the appender.\n\nDUCKDBAPI duckdbstate duckdbappendint16(duckdbappender appender, int16t value);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_append_int32-Tuple{Any, Any}","page":"Home","title":"DuckDB.duckdb_append_int32","text":"Append an int32_t value to the appender.\n\nDUCKDBAPI duckdbstate duckdbappendint32(duckdbappender appender, int32t value);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_append_int64-Tuple{Any, Any}","page":"Home","title":"DuckDB.duckdb_append_int64","text":"Append an int64_t value to the appender.\n\nDUCKDBAPI duckdbstate duckdbappendint64(duckdbappender appender, int64t value);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_append_int8-Tuple{Any, Any}","page":"Home","title":"DuckDB.duckdb_append_int8","text":"Append an int8_t value to the appender.\n\nDUCKDBAPI duckdbstate duckdbappendint8(duckdbappender appender, int8t value);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_append_interval-Tuple{Any, Any}","page":"Home","title":"DuckDB.duckdb_append_interval","text":"Append a duckdb_interval value to the appender.\n\nDUCKDBAPI duckdbstate duckdbappendinterval(duckdbappender appender, duckdbinterval value);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_append_null-Tuple{Any}","page":"Home","title":"DuckDB.duckdb_append_null","text":"Append a NULL value to the appender (of any type).\n\nDUCKDBAPI duckdbstate duckdbappendnull(duckdb_appender appender);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_append_time-Tuple{Any, Any}","page":"Home","title":"DuckDB.duckdb_append_time","text":"Append a duckdb_time value to the appender.\n\nDUCKDBAPI duckdbstate duckdbappendtime(duckdbappender appender, duckdbtime value);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_append_timestamp-Tuple{Any, Any}","page":"Home","title":"DuckDB.duckdb_append_timestamp","text":"Append a duckdb_timestamp value to the appender.\n\nDUCKDBAPI duckdbstate duckdbappendtimestamp(duckdbappender appender, duckdbtimestamp value);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_append_uint16-Tuple{Any, Any}","page":"Home","title":"DuckDB.duckdb_append_uint16","text":"Append a uint16_t value to the appender.\n\nDUCKDBAPI duckdbstate duckdbappenduint16(duckdbappender appender, uint16t value);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_append_uint32-Tuple{Any, Any}","page":"Home","title":"DuckDB.duckdb_append_uint32","text":"Append a uint32_t value to the appender.\n\nDUCKDBAPI duckdbstate duckdbappenduint32(duckdbappender appender, uint32t value);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_append_uint64-Tuple{Any, Any}","page":"Home","title":"DuckDB.duckdb_append_uint64","text":"Append a uint64_t value to the appender.\n\nDUCKDBAPI duckdbstate duckdbappenduint64(duckdbappender appender, uint64t value);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_append_uint8-Tuple{Any, Any}","page":"Home","title":"DuckDB.duckdb_append_uint8","text":"Append a uint8_t value to the appender.\n\nDUCKDBAPI duckdbstate duckdbappenduint8(duckdbappender appender, uint8t value);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_append_varchar-Tuple{Any, Any}","page":"Home","title":"DuckDB.duckdb_append_varchar","text":"Append a varchar value to the appender.\n\nDUCKDBAPI duckdbstate duckdbappendvarchar(duckdb_appender appender, const char *val);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_append_varchar_length-Tuple{Any, Any, Any}","page":"Home","title":"DuckDB.duckdb_append_varchar_length","text":"Append a varchar value to the appender.\n\nDUCKDBAPI duckdbstate duckdbappendvarcharlength(duckdbappender appender, const char *val, idx_t length);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_appender_begin_row-Tuple{Any}","page":"Home","title":"DuckDB.duckdb_appender_begin_row","text":"A nop function, provided for backwards compatibility reasons. Does nothing. Only duckdb_appender_end_row is required.\n\nDUCKDBAPI duckdbstate duckdbappenderbeginrow(duckdbappender appender);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_appender_close-Tuple{Any}","page":"Home","title":"DuckDB.duckdb_appender_close","text":"Close the appender, flushing all intermediate state in the appender to the table and closing it for further appends.\n\nThis is generally not necessary. Call duckdb_appender_destroy instead.\n\nappender: The appender to flush and close.\nreturns: DuckDBSuccess on success or DuckDBError on failure.\n\nDUCKDBAPI duckdbstate duckdbappenderclose(duckdb_appender appender);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_appender_create-NTuple{4, Any}","page":"Home","title":"DuckDB.duckdb_appender_create","text":"Creates an appender object.\n\nconnection: The connection context to create the appender in.\nschema: The schema of the table to append to, or nullptr for the default schema.\ntable: The table name to append to.\nout_appender: The resulting appender object.\nreturns: DuckDBSuccess on success or DuckDBError on failure.\n\nDUCKDBAPI duckdbstate duckdbappendercreate(duckdbconnection connection, const char *schema, const char *table,                                                duckdbappender *out_appender);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_appender_destroy-Tuple{Any}","page":"Home","title":"DuckDB.duckdb_appender_destroy","text":"Close the appender and destroy it. Flushing all intermediate state in the appender to the table, and de-allocating all memory associated with the appender.\n\nappender: The appender to flush, close and destroy.\nreturns: DuckDBSuccess on success or DuckDBError on failure.\n\nDUCKDBAPI duckdbstate duckdbappenderdestroy(duckdb_appender *appender);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_appender_end_row-Tuple{Any}","page":"Home","title":"DuckDB.duckdb_appender_end_row","text":"Finish the current row of appends. After end_row is called, the next row can be appended.\n\nappender: The appender.\nreturns: DuckDBSuccess on success or DuckDBError on failure.\n\nDUCKDBAPI duckdbstate duckdbappenderendrow(duckdbappender appender);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_appender_error-Tuple{Any}","page":"Home","title":"DuckDB.duckdb_appender_error","text":"Returns the error message associated with the given appender. If the appender has no error message, this returns nullptr instead.\n\nThe error message should not be freed. It will be de-allocated when duckdb_appender_destroy is called.\n\nappender: The appender to get the error from.\nreturns: The error message, or nullptr if there is none.\n\nDUCKDBAPI const char *duckdbappendererror(duckdbappender appender);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_appender_flush-Tuple{Any}","page":"Home","title":"DuckDB.duckdb_appender_flush","text":"Flush the appender to the table, forcing the cache of the appender to be cleared and the data to be appended to the base table.\n\nThis should generally not be used unless you know what you are doing. Instead, call duckdb_appender_destroy when you are done with the appender.\n\nappender: The appender to flush.\nreturns: DuckDBSuccess on success or DuckDBError on failure.\n\nDUCKDBAPI duckdbstate duckdbappenderflush(duckdb_appender appender);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_arrow_column_count-Tuple{Any}","page":"Home","title":"DuckDB.duckdb_arrow_column_count","text":"Returns the number of columns present in a the arrow result object.\n\nresult: The result object.\nreturns: The number of columns present in the result object.\n\nDUCKDBAPI idxt duckdbarrowcolumncount(duckdbarrow result);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_arrow_row_count-Tuple{Any}","page":"Home","title":"DuckDB.duckdb_arrow_row_count","text":"Returns the number of rows present in a the arrow result object.\n\nresult: The result object.\nreturns: The number of rows present in the result object.\n\nDUCKDBAPI idxt duckdbarrowrowcount(duckdbarrow result);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_arrow_rows_changed-Tuple{Any}","page":"Home","title":"DuckDB.duckdb_arrow_rows_changed","text":"Returns the number of rows changed by the query stored in the arrow result. This is relevant only for INSERT/UPDATE/DELETE queries. For other queries the rows_changed will be 0.\n\nresult: The result object.\nreturns: The number of rows changed.\n\nDUCKDBAPI idxt duckdbarrowrowschanged(duckdbarrow result);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_bind_blob-NTuple{4, Any}","page":"Home","title":"DuckDB.duckdb_bind_blob","text":"Binds a blob value to the prepared statement at the specified index.\n\nDUCKDBAPI duckdbstate duckdbbindblob(duckdbpreparedstatement preparedstatement, idxt paramidx,                                          const void *data, idxt length);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_bind_boolean-Tuple{Any, Any, Any}","page":"Home","title":"DuckDB.duckdb_bind_boolean","text":"Binds a bool value to the prepared statement at the specified index.\n\nDUCKDBAPI duckdbstate duckdbbindboolean(duckdbpreparedstatement preparedstatement, idxt param_idx, bool val);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_bind_date-Tuple{Any, Any, Any}","page":"Home","title":"DuckDB.duckdb_bind_date","text":"Binds a duckdb_date value to the prepared statement at the specified index.\n\nDUCKDBAPI duckdbstate duckdbbinddate(duckdbpreparedstatement preparedstatement, idxt paramidx,                                          duckdbdate val);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_bind_double-Tuple{Any, Any, Any}","page":"Home","title":"DuckDB.duckdb_bind_double","text":"Binds an double value to the prepared statement at the specified index.\n\nDUCKDBAPI duckdbstate duckdbbinddouble(duckdbpreparedstatement preparedstatement, idxt param_idx, double val);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_bind_float-Tuple{Any, Any, Any}","page":"Home","title":"DuckDB.duckdb_bind_float","text":"Binds an float value to the prepared statement at the specified index.\n\nDUCKDBAPI duckdbstate duckdbbindfloat(duckdbpreparedstatement preparedstatement, idxt param_idx, float val);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_bind_hugeint-Tuple{Any, Any, Any}","page":"Home","title":"DuckDB.duckdb_bind_hugeint","text":"Binds an duckdbhugeint value to the prepared statement at the specified index. */ DUCKDBAPI duckdbstate duckdbbindhugeint(duckdbpreparedstatement preparedstatement, idxt paramidx,                                             duckdb_hugeint val);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_bind_int16-Tuple{Any, Any, Any}","page":"Home","title":"DuckDB.duckdb_bind_int16","text":"Binds an int16_t value to the prepared statement at the specified index.\n\nDUCKDBAPI duckdbstate duckdbbindint16(duckdbpreparedstatement preparedstatement, idxt paramidx, int16t val);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_bind_int32-Tuple{Any, Any, Any}","page":"Home","title":"DuckDB.duckdb_bind_int32","text":"Binds an int32_t value to the prepared statement at the specified index.\n\nDUCKDBAPI duckdbstate duckdbbindint32(duckdbpreparedstatement preparedstatement, idxt paramidx, int32t val);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_bind_int64-Tuple{Any, Any, Any}","page":"Home","title":"DuckDB.duckdb_bind_int64","text":"Binds an int64_t value to the prepared statement at the specified index.\n\nDUCKDBAPI duckdbstate duckdbbindint64(duckdbpreparedstatement preparedstatement, idxt paramidx, int64t val);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_bind_int8-Tuple{Any, Any, Any}","page":"Home","title":"DuckDB.duckdb_bind_int8","text":"Binds an int8_t value to the prepared statement at the specified index.\n\nDUCKDBAPI duckdbstate duckdbbindint8(duckdbpreparedstatement preparedstatement, idxt paramidx, int8t val);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_bind_interval-Tuple{Any, Any, Any}","page":"Home","title":"DuckDB.duckdb_bind_interval","text":"Binds a duckdb_interval value to the prepared statement at the specified index.\n\nDUCKDBAPI duckdbstate duckdbbindinterval(duckdbpreparedstatement preparedstatement, idxt paramidx,                                              duckdbinterval val);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_bind_null-Tuple{Any, Any}","page":"Home","title":"DuckDB.duckdb_bind_null","text":"Binds a NULL value to the prepared statement at the specified index.\n\nDUCKDBAPI duckdbstate duckdbbindnull(duckdbpreparedstatement preparedstatement, idxt param_idx);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_bind_time-Tuple{Any, Any, Any}","page":"Home","title":"DuckDB.duckdb_bind_time","text":"Binds a duckdb_time value to the prepared statement at the specified index.\n\nDUCKDBAPI duckdbstate duckdbbindtime(duckdbpreparedstatement preparedstatement, idxt paramidx,                                          duckdbtime val);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_bind_timestamp-Tuple{Any, Any, Any}","page":"Home","title":"DuckDB.duckdb_bind_timestamp","text":"Binds a duckdb_timestamp value to the prepared statement at the specified index.\n\nDUCKDBAPI duckdbstate duckdbbindtimestamp(duckdbpreparedstatement preparedstatement, idxt paramidx,                                               duckdbtimestamp val);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_bind_uint16-Tuple{Any, Any, Any}","page":"Home","title":"DuckDB.duckdb_bind_uint16","text":"Binds an uint16_t value to the prepared statement at the specified index.\n\nDUCKDBAPI duckdbstate duckdbbinduint16(duckdbpreparedstatement preparedstatement, idxt paramidx, uint16t val);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_bind_uint32-Tuple{Any, Any, Any}","page":"Home","title":"DuckDB.duckdb_bind_uint32","text":"Binds an uint32_t value to the prepared statement at the specified index.\n\nDUCKDBAPI duckdbstate duckdbbinduint32(duckdbpreparedstatement preparedstatement, idxt paramidx, uint32t val);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_bind_uint64-Tuple{Any, Any, Any}","page":"Home","title":"DuckDB.duckdb_bind_uint64","text":"Binds an uint64_t value to the prepared statement at the specified index.\n\nDUCKDBAPI duckdbstate duckdbbinduint64(duckdbpreparedstatement preparedstatement, idxt paramidx, uint64t val);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_bind_uint8-Tuple{Any, Any, Any}","page":"Home","title":"DuckDB.duckdb_bind_uint8","text":"Binds an uint8_t value to the prepared statement at the specified index.\n\nDUCKDBAPI duckdbstate duckdbbinduint8(duckdbpreparedstatement preparedstatement, idxt paramidx, uint8t val);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_bind_varchar-Tuple{Any, Any, Any}","page":"Home","title":"DuckDB.duckdb_bind_varchar","text":"Binds a null-terminated varchar value to the prepared statement at the specified index.\n\nDUCKDBAPI duckdbstate duckdbbindvarchar(duckdbpreparedstatement preparedstatement, idxt param_idx,                                             const char *val);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_bind_varchar_length-NTuple{4, Any}","page":"Home","title":"DuckDB.duckdb_bind_varchar_length","text":"Binds a varchar value to the prepared statement at the specified index.\n\nDUCKDBAPI duckdbstate duckdbbindvarcharlength(duckdbpreparedstatement preparedstatement, idxt paramidx,                                                    const char *val, idx_t length);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_close-Tuple{Any}","page":"Home","title":"DuckDB.duckdb_close","text":"duckdb_close(database)\n\nCloses the specified database and de-allocates all memory allocated for that database. This should be called after you are done with any database allocated through duckdb_open. Note that failing to call duckdb_close (in case of e.g. a program crash) will not cause data corruption. Still it is recommended to always correctly close a database object after you are done with it.\n\ndatabase: The database object to shut down.\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_column_count-Tuple{Any}","page":"Home","title":"DuckDB.duckdb_column_count","text":"duckdb_column_count(result)\n\nReturns the number of columns present in a the result object.\n\nresult: The result object.\nreturns: The number of columns present in the result object.\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_column_data-Tuple{Any, Any}","page":"Home","title":"DuckDB.duckdb_column_data","text":"duckdb_column_data(result,col)\n\nReturns the data of a specific column of a result in columnar format. This is the fastest way of accessing data in a query result, as no conversion or type checking must be performed (outside of the original switch). If performance is a concern, it is recommended to use this API over the duckdb_value functions.\n\nThe function returns a dense array which contains the result data. The exact type stored in the array depends on the corresponding duckdbtype (as provided by `duckdbcolumntype). For the exact type by which the data should be accessed, see the comments in [the types section](types) or theDUCKDBTYPE` enum.\n\nFor example, for a column of type DUCKDB_TYPE_INTEGER, rows can be accessed in the following manner:\n\nint32_t *data = (int32_t *) duckdb_column_data(&result, 0);\nprintf(\"Data for row %d: %d\\n\", row, data[row]);\n\nresult: The result object to fetch the column data from.\ncol: The column index.\nreturns: The column data of the specified column.\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_column_name-Tuple{Any, Any}","page":"Home","title":"DuckDB.duckdb_column_name","text":"duckdb_column_name(result,col)\n\nReturns the column name of the specified column. The result should not need be freed; the column names will automatically be destroyed when the result is destroyed.\n\nReturns NULL if the column is out of range.\n\nresult: The result object to fetch the column name from.\ncol: The column index.\nreturns: The column name of the specified column.\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_column_type-Tuple{Any, Any}","page":"Home","title":"DuckDB.duckdb_column_type","text":"duckdb_column_type(result,col)\n\nReturns the column type of the specified column.\n\nReturns DUCKDB_TYPE_INVALID if the column is out of range.\n\nresult: The result object to fetch the column type from.\ncol: The column index.\nreturns: The column type of the specified column.\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_config_count-Tuple{}","page":"Home","title":"DuckDB.duckdb_config_count","text":"duckdb_config_count()\n\nThis returns the total amount of configuration options available for usage with duckdb_get_config_flag.\n\nThis should not be called in a loop as it internally loops over all the options.\n\nreturns: The amount of config options available.\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_connect-Tuple{Any, Any}","page":"Home","title":"DuckDB.duckdb_connect","text":"duckdb_connect(database, out_connection)\n\nOpens a connection to a database. Connections are required to query the database, and store transactional state associated with the connection.\n\ndatabase: The database file to connect to.\nout_connection: The result connection object.\nreturns: DuckDBSuccess on success or DuckDBError on failure.\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_create_config-Tuple{Any}","page":"Home","title":"DuckDB.duckdb_create_config","text":"duckdb_create_config(config)\n\nInitializes an empty configuration object that can be used to provide start-up options for the DuckDB instance through duckdb_open_ext.\n\nThis will always succeed unless there is a malloc failure.\n\nout_config: The result configuration object.\nreturns: DuckDBSuccess on success or DuckDBError on failure.\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_destroy_arrow-Tuple{Any}","page":"Home","title":"DuckDB.duckdb_destroy_arrow","text":"Closes the result and de-allocates all memory allocated for the arrow result.\n\nresult: The result to destroy.\n\nDUCKDBAPI void duckdbdestroyarrow(duckdbarrow *result);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_destroy_config-Tuple{Any}","page":"Home","title":"DuckDB.duckdb_destroy_config","text":"duckdb_destroy_config(config)\n\nDestroys the specified configuration option and de-allocates all memory allocated for the object.\n\nconfig: The configuration object to destroy.\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_destroy_prepare-Tuple{Any}","page":"Home","title":"DuckDB.duckdb_destroy_prepare","text":"Closes the prepared statement and de-allocates all memory allocated for that connection.\n\nprepared_statement: The prepared statement to destroy.\n\nDUCKDBAPI void duckdbdestroyprepare(duckdbpreparedstatement *preparedstatement);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_destroy_result-Tuple{Any}","page":"Home","title":"DuckDB.duckdb_destroy_result","text":"duckdb_destroy_result(result)\n\nCloses the result and de-allocates all memory allocated for that connection.\n\nresult: The result to destroy.\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_disconnect-Tuple{Any}","page":"Home","title":"DuckDB.duckdb_disconnect","text":"duckdb_disconnect(connection)\n\nCloses the specified connection and de-allocates all memory allocated for that connection.\n\nconnection: The connection to close.\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_double_to_hugeint-Tuple{Any}","page":"Home","title":"DuckDB.duckdb_double_to_hugeint","text":"duckdbdoubleto_hugeint(val)\n\nConverts a double value to a duckdb_hugeint object.\n\nIf the conversion fails because the double value is too big the result will be 0.\n\nval: The double value.\nreturns: The converted duckdb_hugeint element.\n\nDUCKDBAPI duckdbhugeint duckdbdoubleto_hugeint(double val);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_execute_prepared-Tuple{Any, Any}","page":"Home","title":"DuckDB.duckdb_execute_prepared","text":"Executes the prepared statement with the given bound parameters, and returns a materialized query result.\n\nThis method can be called multiple times for each prepared statement, and the parameters can be modified between calls to this function.\n\nprepared_statement: The prepared statement to execute.\nout_result: The query result.\nreturns: DuckDBSuccess on success or DuckDBError on failure.\n\nDUCKDBAPI duckdbstate duckdbexecuteprepared(duckdbpreparedstatement preparedstatement,                                                 duckdbresult *out_result);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_execute_prepared_arrow-Tuple{Any, Any}","page":"Home","title":"DuckDB.duckdb_execute_prepared_arrow","text":"Executes the prepared statement with the given bound parameters, and returns an arrow query result.\n\nprepared_statement: The prepared statement to execute.\nout_result: The query result.\nreturns: DuckDBSuccess on success or DuckDBError on failure.\n\nDUCKDBAPI duckdbstate duckdbexecutepreparedarrow(duckdbpreparedstatement preparedstatement,                                                       duckdbarrow *outresult);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_free-Tuple{Any}","page":"Home","title":"DuckDB.duckdb_free","text":"duckdb_free(ptr)\n\nFree a value returned from duckdb_malloc, duckdb_value_varchar or duckdb_value_blob.\n\nptr: The memory region to de-allocate.\n\nDUCKDBAPI void duckdbfree(void *ptr);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_from_date-Tuple{Any}","page":"Home","title":"DuckDB.duckdb_from_date","text":"duckdbfromdate(date)\n\nDecompose a duckdb_date object into year, month and date (stored as duckdb_date_struct).\n\ndate: The date object, as obtained from a DUCKDB_TYPE_DATE column.\nreturns: The duckdb_date_struct with the decomposed elements.\n\nDUCKDBAPI duckdbdatestruct duckdbfromdate(duckdbdate date);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_from_time-Tuple{Any}","page":"Home","title":"DuckDB.duckdb_from_time","text":"duckdbfromtime(time)\n\nDecompose a duckdb_time object into hour, minute, second and microsecond (stored as duckdb_time_struct).\n\ntime: The time object, as obtained from a DUCKDB_TYPE_TIME column.\nreturns: The duckdb_time_struct with the decomposed elements.\n\nDUCKDBAPI duckdbtimestruct duckdbfromtime(duckdbtime time);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_from_timestamp-Tuple{Any}","page":"Home","title":"DuckDB.duckdb_from_timestamp","text":"duckdbfromtimestamp(ts)\n\nDecompose a duckdb_timestamp object into a duckdb_timestamp_struct.\n\nts: The ts object, as obtained from a DUCKDB_TYPE_TIMESTAMP column.\nreturns: The duckdb_timestamp_struct with the decomposed elements.\n\nDUCKDBAPI duckdbtimestampstruct duckdbfromtimestamp(duckdbtimestamp ts);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_get_config_flag-Tuple{Any, Any, Any}","page":"Home","title":"DuckDB.duckdb_get_config_flag","text":"duckdb_get_config_flag(index,out_name,out_description)\n\nObtains a human-readable name and description of a specific configuration option. This can be used to e.g. display configuration options. This will succeed unless index is out of range (i.e. >= duckdb_config_count).\n\nThe result name or description MUST NOT be freed.\n\nindex: The index of the configuration option (between 0 and duckdb_config_count)\nout_name: A name of the configuration flag.\nout_description: A description of the configuration flag.\nreturns: DuckDBSuccess on success or DuckDBError on failure.\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_hugeint_to_double-Tuple{Any}","page":"Home","title":"DuckDB.duckdb_hugeint_to_double","text":"duckdbhugeintto_double(val)\n\nConverts a duckdbhugeint object (as obtained from a `DUCKDBTYPE_HUGEINT` column) into a double.\n\nval: The hugeint value.\nreturns: The converted double element.\n\nDUCKDBAPI double duckdbhugeinttodouble(duckdb_hugeint val);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_malloc-Tuple{Any}","page":"Home","title":"DuckDB.duckdb_malloc","text":"duckdb_malloc(size)\n\nAllocate size bytes of memory using the duckdb internal malloc function. Any memory allocated in this manner should be freed using duckdb_free.\n\nsize: The number of bytes to allocate.\nreturns: A pointer to the allocated memory region.\n\nDUCKDBAPI void *duckdbmalloc(size_t size);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_nparams-Tuple{Any}","page":"Home","title":"DuckDB.duckdb_nparams","text":"Returns the number of parameters that can be provided to the given prepared statement.\n\nReturns 0 if the query was not successfully prepared.\n\nprepared_statement: The prepared statement to obtain the number of parameters for.\n\nDUCKDBAPI idxt duckdbnparams(duckdbpreparedstatement preparedstatement);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_nullmask_data-Tuple{Any, Any}","page":"Home","title":"DuckDB.duckdb_nullmask_data","text":"duckdb_nullmask_data(result,col)\n\nReturns the nullmask of a specific column of a result in columnar format. The nullmask indicates for every row whether or not the corresponding row is NULL. If a row is NULL, the values present in the array provided by duckdb_column_data are undefined.\n\nint32_t *data = (int32_t *) duckdb_column_data(&result, 0);\nbool *nullmask = duckdb_nullmask_data(&result, 0);\nif (nullmask[row]) {\n    printf(\"Data for row %d: NULL\n\", row);\n} else {\n    printf(\"Data for row %d: %d\n\", row, data[row]);\n}\n\nresult: The result object to fetch the nullmask from.\ncol: The column index.\nreturns: The nullmask of the specified column.\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_open-Tuple{Any, Any}","page":"Home","title":"DuckDB.duckdb_open","text":"duckdb_open(path, out_database)\n\nCreates a new database or opens an existing database file stored at the the given path. If no path is given a new in-memory database is created instead.\n\npath: Path to the database file on disk, or nullptr or :memory: to open an in-memory database.\nout_database: The result database object.\nreturns: DuckDBSuccess on success or DuckDBError on failure.\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_param_type-Tuple{Any, Any}","page":"Home","title":"DuckDB.duckdb_param_type","text":"Returns the parameter type for the parameter at the given index.\n\nReturns DUCKDB_TYPE_INVALID if the parameter index is out of range or the statement was not successfully prepared.\n\nprepared_statement: The prepared statement.\nparam_idx: The parameter index.\nreturns: The parameter type\n\nDUCKDBAPI duckdbtype duckdbparamtype(duckdbpreparedstatement preparedstatement, idxt param_idx);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_prepare-Tuple{Any, Any, Any}","page":"Home","title":"DuckDB.duckdb_prepare","text":"Create a prepared statement object from a query.\n\nNote that after calling duckdb_prepare, the prepared statement should always be destroyed using duckdb_destroy_prepare, even if the prepare fails.\n\nIf the prepare fails, duckdb_prepare_error can be called to obtain the reason why the prepare failed.\n\nconnection: The connection object\nquery: The SQL query to prepare\noutpreparedstatement: The resulting prepared statement object\nreturns: DuckDBSuccess on success or DuckDBError on failure.\n\nDUCKDBAPI duckdbstate duckdbprepare(duckdbconnection connection, const char *query,                                        duckdbpreparedstatement *outpreparedstatement);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_prepare_error-Tuple{Any}","page":"Home","title":"DuckDB.duckdb_prepare_error","text":"Returns the error message associated with the given prepared statement. If the prepared statement has no error message, this returns nullptr instead.\n\nThe error message should not be freed. It will be de-allocated when duckdb_destroy_prepare is called.\n\nprepared_statement: The prepared statement to obtain the error from.\nreturns: The error message, or nullptr if there is none.\n\nDUCKDBAPI const char *duckdbprepareerror(duckdbpreparedstatement preparedstatement);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_query-Tuple{Any, Any, Any}","page":"Home","title":"DuckDB.duckdb_query","text":"duckdb_query(connection,query,out_result)\n\nExecutes a SQL query within a connection and stores the full (materialized) result in the outresult pointer. If the query fails to execute, DuckDBError is returned and the error message can be retrieved by calling `duckdbresult_error`.\n\nNote that after running duckdb_query, duckdb_destroy_result must be called on the result object even if the query fails, otherwise the error stored within the result will not be freed correctly.\n\nconnection: The connection to perform the query in.\nquery: The SQL query to run.\nout_result: The query result.\nreturns: DuckDBSuccess on success or DuckDBError on failure.\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_query_arrow-Tuple{Any, Any, Any}","page":"Home","title":"DuckDB.duckdb_query_arrow","text":"Executes a SQL query within a connection and stores the full (materialized) result in an arrow structure. If the query fails to execute, DuckDBError is returned and the error message can be retrieved by calling duckdb_query_arrow_error.\n\nNote that after running duckdb_query_arrow, duckdb_destroy_arrow must be called on the result object even if the query fails, otherwise the error stored within the result will not be freed correctly.\n\nconnection: The connection to perform the query in.\nquery: The SQL query to run.\nout_result: The query result.\nreturns: DuckDBSuccess on success or DuckDBError on failure.\n\nDUCKDBAPI duckdbstate duckdbqueryarrow(duckdbconnection connection, const char *query, duckdbarrow *out_result);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_query_arrow_array-Tuple{Any, Any}","page":"Home","title":"DuckDB.duckdb_query_arrow_array","text":"Fetch an internal arrow array from the arrow result.\n\nThis function can be called multiple time to get next chunks, which will free the previous outarray. So consume the outarray before calling this function again.\n\nresult: The result to fetch the array from.\nout_array: The output array.\nreturns: DuckDBSuccess on success or DuckDBError on failure.\n\nDUCKDBAPI duckdbstate duckdbqueryarrowarray(duckdbarrow result, duckdbarrowarray *out_array);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_query_arrow_error-Tuple{Any}","page":"Home","title":"DuckDB.duckdb_query_arrow_error","text":"Returns the error message contained within the result. The error is only set if duckdb_query_arrow returns DuckDBError.\n\nThe error message should not be freed. It will be de-allocated when duckdb_destroy_arrow is called.\n\nresult: The result object to fetch the nullmask from.\nreturns: The error of the result.\n\nDUCKDBAPI const char *duckdbqueryarrowerror(duckdb_arrow result);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_query_arrow_schema-Tuple{Any, Any}","page":"Home","title":"DuckDB.duckdb_query_arrow_schema","text":"Fetch the internal arrow schema from the arrow result.\n\nresult: The result to fetch the schema from.\nout_schema: The output schema.\nreturns: DuckDBSuccess on success or DuckDBError on failure.\n\nDUCKDBAPI duckdbstate duckdbqueryarrowschema(duckdbarrow result, duckdbarrowschema *out_schema);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_result_error-Tuple{Any}","page":"Home","title":"DuckDB.duckdb_result_error","text":"duckdb_result_error(result)\n\nReturns the error message contained within the result. The error is only set if duckdb_query returns DuckDBError.\n\nThe result of this function must not be freed. It will be cleaned up when duckdb_destroy_result is called.\n\nresult: The result object to fetch the nullmask from.\nreturns: The error of the result.\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_row_count-Tuple{Any}","page":"Home","title":"DuckDB.duckdb_row_count","text":"duckdb_row_count(result)\n\nReturns the number of rows present in a the result object.\n\nresult: The result object.\nreturns: The number of rows present in the result object.\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_rows_changed-Tuple{Any}","page":"Home","title":"DuckDB.duckdb_rows_changed","text":"duckdb_rows_changed(result)\n\nReturns the number of rows changed by the query stored in the result. This is relevant only for INSERT/UPDATE/DELETE queries. For other queries the rows_changed will be 0.\n\nresult: The result object.\nreturns: The number of rows changed.\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_set_config-Tuple{Any, Any, Any}","page":"Home","title":"DuckDB.duckdb_set_config","text":"duckdb_set_config(config,name,option)\n\nSets the specified option for the specified configuration. The configuration option is indicated by name. To obtain a list of config options, see duckdb_get_config_flag.\n\nIn the source code, configuration options are defined in config.cpp.\n\nThis can fail if either the name is invalid, or if the value provided for the option is invalid.\n\nduckdb_config: The configuration object to set the option on.\nname: The name of the configuration flag to set.\noption: The value to set the configuration flag to.\nreturns: DuckDBSuccess on success or DuckDBError on failure.\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_to_date-Tuple{Any}","page":"Home","title":"DuckDB.duckdb_to_date","text":"duckdbtodate(date)\n\nRe-compose a duckdb_date from year, month and date (duckdb_date_struct).\n\ndate: The year, month and date stored in a duckdb_date_struct.\nreturns: The duckdb_date element.\n\nDUCKDBAPI duckdbdate duckdbtodate(duckdbdatestruct date);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_to_time-Tuple{Any}","page":"Home","title":"DuckDB.duckdb_to_time","text":"duckdbtotime(time)\n\nRe-compose a duckdb_time from hour, minute, second and microsecond (duckdb_time_struct).\n\ntime: The hour, minute, second and microsecond in a duckdb_time_struct.\nreturns: The duckdb_time element.\n\nDUCKDBAPI duckdbtime duckdbtotime(duckdbtimestruct time);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_to_timestamp-Tuple{Any}","page":"Home","title":"DuckDB.duckdb_to_timestamp","text":"duckdbtotimestamp(ts)\n\nRe-compose a duckdb_timestamp from a duckdbtimestampstruct.\n\nts: The de-composed elements in a duckdb_timestamp_struct.\nreturns: The duckdb_timestamp element.\n\n*/ DUCKDBAPI duckdbtimestamp duckdbtotimestamp(duckdbtimestampstruct ts);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_value_blob-Tuple{Any, Any, Any}","page":"Home","title":"DuckDB.duckdb_value_blob","text":"duckdbvalueblob(result,col,row)\n\nreturns: The duckdb_blob value at the specified location. Returns a blob with blob.data set to nullptr if the\n\nvalue cannot be converted. The resulting \"blob.data\" must be freed with duckdb_free.\n\nDUCKDBAPI duckdbblob duckdbvalueblob(duckdbresult *result, idxt col, idx_t row);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_value_boolean-Tuple{Any, Any, Any}","page":"Home","title":"DuckDB.duckdb_value_boolean","text":"duckdb_value_boolean(result,col,row)\n\nreturns: The boolean value at the specified location, or false if the value cannot be converted.\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_value_date-Tuple{Any, Any, Any}","page":"Home","title":"DuckDB.duckdb_value_date","text":"duckdbvaluedate(result,col,row)\n\nreturns: The duckdb_date value at the specified location, or 0 if the value cannot be converted.\n\nDUCKDBAPI duckdbdate duckdbvaluedate(duckdbresult *result, idxt col, idx_t row);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_value_double-Tuple{Any, Any, Any}","page":"Home","title":"DuckDB.duckdb_value_double","text":"duckdb_value_double(result,col,row)\n\nreturns: The double value at the specified location, or 0 if the value cannot be converted.\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_value_float-Tuple{Any, Any, Any}","page":"Home","title":"DuckDB.duckdb_value_float","text":"duckdb_value_float(result,col,row)\n\nreturns: The float value at the specified location, or 0 if the value cannot be converted.\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_value_hugeint-Tuple{Any, Any, Any}","page":"Home","title":"DuckDB.duckdb_value_hugeint","text":"duckdb_value_hugeint(result,col,row)\n\nreturns: The duckdb_hugeint value at the specified location, or 0 if the value cannot be converted.\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_value_int16-Tuple{Any, Any, Any}","page":"Home","title":"DuckDB.duckdb_value_int16","text":"duckdb_value_int16(result,col,row)\n\nreturns: The int16_t value at the specified location, or 0 if the value cannot be converted.\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_value_int32-Tuple{Any, Any, Any}","page":"Home","title":"DuckDB.duckdb_value_int32","text":"duckdb_value_int32(result,col,row)\n\nreturns: The int32_t value at the specified location, or 0 if the value cannot be converted.\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_value_int64-Tuple{Any, Any, Any}","page":"Home","title":"DuckDB.duckdb_value_int64","text":"duckdb_value_int64(result,col,row)\n\nreturns: The int64_t value at the specified location, or 0 if the value cannot be converted.\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_value_int8-Tuple{Any, Any, Any}","page":"Home","title":"DuckDB.duckdb_value_int8","text":"duckdb_value_int8(result,col,row)\n\nreturns: The int8_t value at the specified location, or 0 if the value cannot be converted.\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_value_interval-Tuple{Any, Any, Any}","page":"Home","title":"DuckDB.duckdb_value_interval","text":"duckdbvalueinterval(result,col,row)\n\nreturns: The duckdb_interval value at the specified location, or 0 if the value cannot be converted.\n\nDUCKDBAPI duckdbinterval duckdbvalueinterval(duckdbresult *result, idxt col, idx_t row);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_value_is_null-Tuple{Any, Any, Any}","page":"Home","title":"DuckDB.duckdb_value_is_null","text":"duckdbvalueis_null(result,col,row)\n\nreturns: Returns true if the value at the specified index is NULL, and false otherwise.\n\nDUCKDBAPI bool duckdbvalueisnull(duckdbresult *result, idxt col, idx_t row);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_value_time-Tuple{Any, Any, Any}","page":"Home","title":"DuckDB.duckdb_value_time","text":"duckdbvaluetime(result,col,row)\n\nreturns: The duckdb_time value at the specified location, or 0 if the value cannot be converted.\n\nDUCKDBAPI duckdbtime duckdbvaluetime(duckdbresult *result, idxt col, idx_t row);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_value_timestamp-Tuple{Any, Any, Any}","page":"Home","title":"DuckDB.duckdb_value_timestamp","text":"duckdbvaluetimestamp(result,col,row)\n\nreturns: The duckdb_timestamp value at the specified location, or 0 if the value cannot be converted.\n\nDUCKDBAPI duckdbtimestamp duckdbvaluetimestamp(duckdbresult *result, idxt col, idx_t row);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_value_uint16-Tuple{Any, Any, Any}","page":"Home","title":"DuckDB.duckdb_value_uint16","text":"duckdb_value_uint16(result,col,row)\n\nreturns: The uint16_t value at the specified location, or 0 if the value cannot be converted.\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_value_uint32-Tuple{Any, Any, Any}","page":"Home","title":"DuckDB.duckdb_value_uint32","text":"duckdb_value_uint32(result,col,row)\n\nreturns: The uint32_t value at the specified location, or 0 if the value cannot be converted.\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_value_uint64-Tuple{Any, Any, Any}","page":"Home","title":"DuckDB.duckdb_value_uint64","text":"duckdb_value_uint64(result,col,row)\n\nreturns: The uint64_t value at the specified location, or 0 if the value cannot be converted.\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_value_uint8-Tuple{Any, Any, Any}","page":"Home","title":"DuckDB.duckdb_value_uint8","text":"duckdb_value_uint8(result,col,row)\n\nreturns: The uint8_t value at the specified location, or 0 if the value cannot be converted.\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_value_varchar-Tuple{Any, Any, Any}","page":"Home","title":"DuckDB.duckdb_value_varchar","text":"duckdbvaluevarchar(result,col,row)\n\nreturns: The char* value at the specified location, or nullptr if the value cannot be converted.\n\nThe result must be freed with duckdb_free.\n\nDUCKDBAPI char *duckdbvaluevarchar(duckdbresult *result, idxt col, idxt row);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.duckdb_value_varchar_internal-Tuple{Any, Any, Any}","page":"Home","title":"DuckDB.duckdb_value_varchar_internal","text":"duckdbvaluevarchar_internal(result,col,row)\n\nreturns: The char* value at the specified location. ONLY works on VARCHAR columns and does not auto-cast.\n\nIf the column is NOT a VARCHAR column this function will return NULL.\n\nThe result must NOT be freed.\n\nDUCKDBAPI char *duckdbvaluevarcharinternal(duckdbresult *result, idxt col, idx_t row);\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.execute-Tuple{Ref{Ptr{Nothing}}, String}","page":"Home","title":"DuckDB.execute","text":"execute(connection, query)\n\nExecutes a SQL query within a connection and returns the full (materialized) result. If the query fails to execute, DuckDBError is returned and the error message can be retrieved by calling duckdb_result_error.\n\nNote that after running duckdbquery, duckdbdestroy_result must be called on the result object even if the query fails, otherwise the error stored within the result will not be freed correctly.\n\nconnection: The connection to perform the query in.\nquery: The SQL query to run.\nreturns: the full result pointer\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.toDataFrame-Tuple{Ref{DuckDB.duckdb_result}}","page":"Home","title":"DuckDB.toDataFrame","text":"toDataFrame(result::Ref{duckdb_result})::DataFrame\n\nCreates a DataFrame from the full result\n\nresult: the full result from execute\nreturns: the abstract dataframe\n\n\n\n\n\n","category":"method"},{"location":"#DuckDB.toDataFrame-Tuple{Ref{Ptr{Nothing}}, String}","page":"Home","title":"DuckDB.toDataFrame","text":"toDataFrame(connection::Ref{Ptr{Cvoid}},query::String)::DataFrame\n\nCreates a DataFrame from a SQL query within a connection.\n\nconnection: The connection to perform the query in.\nquery: The SQL query to run.\nreturns: the abstract dataframe\n\n\n\n\n\n","category":"method"}]
}
